
-------------------------------------------------------------------------------

A toy optimising compiler, produced for the University of Sydney programming languages course.
It compiles from a simple C-style language to an intermediate language that looks like assembly.


Tools:
  Produced with GHC 7.8.4, cabal 1.22.6. To compile, install the haskell platform, and then run
  cabal configure, cabal build. cabal install for dependencies.


Invocation:

  Run imp from the root directory, which holds Main.hs, in order that it can
  find the lib/ folder.
  
      imp -lex|-parse|-check|-convert|-interpret file [args ... ]
      imp -unreach|-dead|-mutate|-merge|-fix file
  
  Input source is contained in .imp files. IR code is stored in .ir files. 
  
  -lex tokenises a given file, and -interpret attempts to run it with the given arguments.
  -convert transforms input source into the intermediate representation, and
  -check operates exclusively on the AST, so these are unavailable for .ir files.
  -parse works on both languages, but it produces the AST resulting
  from an .imp file, whereas it prints out the Haskell data structure
  representing a parsed .ir file.
  
  The optimisation flags only work on .ir files:
  -unreach removes unreachable code blocks.
  -dead removes dead code (which has no effect on output)
  -mutate rewrites instructions to speed things up.
  -merge joins joinable blocks, removes removable ones.
  -fix applies all optimisations repeatedly until the code stabilises.
  -cfg generates the flow graph for some IR code and prints it.

  
Features: 

  Syntax and Semantics Analysis: Lexer, parser, a code checker.
  Intermediate Code Generation: Compile from source to a simpler representation with registers etc.
  Interpreter: Actually run the compiled code.
  Optimiser: Reduce the size of compiled code.

  Operator semantics:
    - Multiple-assignment:
        a, b, c  =  1, (1 + c), -b;
    - Functions as operators:
              func(x, y);  <->  x [func] y;
        func(a, b, c, d);  <->  a [func c,d] b;
    - Operator assignment: 
        x = x + 1;        <->   x += 1;
        x = func(x, y, z);   <->   x [func z]= y;
    - Single-assignments can be evaluated as expressions,
      for chained assignment;
    - "Ouroboros" recursion operator: @ calls its enclosing function;

  Source file preprocessor for library importation:
    - Handles circular dependencies;
    - Included math and number-theory toy libraries.

  For the most part, example code in the test/ directory demonstrates
  language features. Some of it is annotated.


Future: 
  - Types.
  - Actually-informative syntax errors with line numbers.
  - Static expression reduction, substitution of constants for variables if
    possible in the AST. Maybe unnecessary given IR optimiser.

-------------------------------------------------------------------------------


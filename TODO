

Start: 15 Sep                        Due: 9 Oct 5pm
[=|>| | | | | | | | | | | | | | | | | | | | | | | ]
             ^ 21st        ^ 28th        ^ 5th

Finish This TODO Scaffold 
	(Unless you guys think it's not worthwhile)

Make The Code Style Consistent

Input Language Parsing + Syntax and Semantics Analysis
	☑ Input Language Parsing	15th Sep
		☑ Program
		☑ Functions
		☑ Args
		☑ Vars
		☑ Blocks
		☑ Statements
		☑ Expressions

	Errors:
	 Undefined Function
	 ☑ Duplicated Function Definition
	 Function Call Incorrect Num Arguments
	 Undefined Variable
	 Duplicated Variable/Argument Definitions
	 ☑ No Main Function
	 Syntax Error 
	 	--NOTE-- I'm guessing this means the parse failed?
	 	Adding more informative error messages
	 	might require nested Monads so that the type
	 	being passed around is Either Parser -- plus an Error
	 	payload.


Intermediate Code Generation
	Unbreak Convert.hs
		Currently commented out so the build compiles.
	
	Complete Grammar
		--PARTIAL-- Work out how to require Functions and Blocks 
		to be constituted of non-empty Block and Instr lists.
	
	Basic Block Enumeration
	
	Convertibles:
		Program
		Function
		Block
		Statement
		  Assignment
		  Return
		  Conditional
		Expression
		  Numeric Primitive
		  ID Primitive
		  Function Call
		  Operator Application


Intermediate Code Interpreter
	Instructions:
		Load Constant
		Load
		Store
		Arithmetic
		Comparison
		Branch
		Return
		Call

Extension Task
	Choose One Or Both

	Infix Notation
		If we define the grammar correctly, should
		be able to achieve operator precedence without extra
		work, I suspect.

	While Loops
		More practical, more familiar, maybe easier to implement?

Tests
	Succeeding Tests (minimum 10)

	Failing Tests (minimum 2)
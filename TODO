Set: 14th Sep                        Due: 9th Oct 5pm
[=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|=|>| | | | | | | ]
             ^ 20th        ^ 27th        ^ 4th

- Remove libcheck
- Add check infinite loop etc.
- move interpreter to core folder
- core lang to internal representation biconverter
Cleanup and beautification
Documentation
- revise invocation flags
final expression return thing
test script
now that interpreter is mainly IO, add better error messages for problems.

Document invocation and new language features in README

Add more informative error checking

Extension Tasks

	☑ Infix Notation
		Determine precedence levels, esp unary operators
		Generalise precedence system to an enumerated hierarchy
	☑ While Loops

Tests
	Succeeding Tests (minimum 10)

	Failing Tests (minimum 2)

☑ Input Language Parsing + Syntax and Semantics Analysis 	17th Sep
	☑ Input Language Parsing								15th Sep
		☑ Program
		☑ Functions
		☑ Args
		☑ Vars
		☑ Blocks
		☑ Statements
		☑ Expressions

	Errors:													17th Sep
	 ☑ Undefined Function 							
	 ☑ Duplicated Function Definition 	 					16th Sep
	 ☑ Function Call Incorrect Num Arguments 
	 ☑ Undefined Variable
	 ☑ Duplicated Variable/Argument Definitions
	 ☑ No Main Function
	 ☑ Syntax Error
	 	This just means the parse failed.
	 	Adding more informative error messages
	 	might require nested Monads so that the type
	 	being passed around is Either Parser -- plus an Error
	 	payload.


Intermediate Code Generation	
	Complete Grammar
		--PARTIAL-- Work out how to require Functions and Blocks 
		to be constituted of non-empty Block and Instr lists.
	
	☑ Variable Zero Initialisation

	☑ Basic Block Enumeration
	
	☑ Convertibles:
		☑ Program
		☑ Function
		☑ Block
		☑ Statement
		  ☑ Assignment
		  ☑ Return
		  ☑ Conditional
		☑ Expression
		  ☑ Numeric Primitive
		  ☑ ID Primitive
		  ☑ Function Call
		  ☑ Operator Application


☑ Intermediate Code Interpreter		25th Sept
	☑ Instructions:
		☑ Load Constant
		☑ Load
		☑ Store
		☑ Arithmetic
		☑ Comparison
		☑ Branch
		☑ Return
		☑ Call

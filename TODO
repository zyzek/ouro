Set: 14th Sep                        Due: 9th Oct 5pm
[=|=|=|=|=|=|=|=|=|=|=|=|>| | | | | | | | | | | | | ]
             ^ 20th        ^ 27th        ^ 4th


Make the Code Style Consistent and Beautiful
	Line lengths <= 100 characters
	Comment Everything


☑ Input Language Parsing + Syntax and Semantics Analysis 	17th Sep
	☑ Input Language Parsing								15th Sep
		☑ Program
		☑ Functions
		☑ Args
		☑ Vars
		☑ Blocks
		☑ Statements
		☑ Expressions

	Errors:													17th Sep
	 ☑ Undefined Function 							
	 ☑ Duplicated Function Definition 	 					16th Sep
	 ☑ Function Call Incorrect Num Arguments 
	 ☑ Undefined Variable
	 ☑ Duplicated Variable/Argument Definitions
	 ☑ No Main Function
	 ☑ Syntax Error
	 	I'm guessing this means the parse failed? Shall ask Ben.
	 	Adding more informative error messages
	 	might require nested Monads so that the type
	 	being passed around is Either Parser -- plus an Error
	 	payload.


Intermediate Code Generation	
	Complete Grammar
		--PARTIAL-- Work out how to require Functions and Blocks 
		to be constituted of non-empty Block and Instr lists.
	
	Variable Zero Initialisation

	☑ Basic Block Enumeration
	
	☑ Convertibles:
		☑ Program
		☑ Function
		☑ Block
		☑ Statement
		  ☑ Assignment
		  ☑ Return
		  ☑ Conditional
		☑ Expression
		  ☑ Numeric Primitive
		  ☑ ID Primitive
		  ☑ Function Call
		  ☑ Operator Application


☑ Intermediate Code Interpreter		25th Sept
	☑ Instructions:
		☑ Load Constant
		☑ Load
		☑ Store
		☑ Arithmetic
		☑ Comparison
		☑ Branch
		☑ Return
		☑ Call


Extension Task
	Choose One Or Both

	Infix Notation
		If we define the grammar correctly, should
		be able to achieve operator precedence without extra
		work, I suspect.

	While Loops
		More practical, more familiar, maybe easier to implement?


Tests
	Succeeding Tests (minimum 10)

	Failing Tests (minimum 2)
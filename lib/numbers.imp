fun factorial(n)
vars total
{       
    total = 1;

    while (n > 1) 
    {       
        total (*)= n;
        n (-)= 1;
    }
    
    total
}


fun fibonacci(n)
vars tmp, pred, prepred, sign
{
    if (n < 0) then 
    { 
        n = -n;
        sign = (n%2)*2 - 1;
    }
    else 
    {
        sign = 1;
    } 
    pred = 1;
    prepred = 0;

    while (n != 0)
    {
        tmp = pred;
        pred (+)= prepred;
        prepred = tmp;
        
        n (-)= 1;
    }

    prepred * sign
}


fun perm(n, r)
{
    factorial(n) / factorial(n - r)
}


fun  binom(n, r)
{   
    perm(n,r) / factorial(r)
}


fun catalan(n)
{
    binom(2*n, n) / (n+1)
}


fun sqrt(n)
vars val
{

    while (val^2 <= n)
    {
        val (+)= 1;
    }

    val - 1
}


fun isPrime(n)
vars max, factor
{
    max = sqrt(n);
    factor = 2;

    while (factor <= max) 
    {
        if !(n % factor) then
        {
            return false;
        }

        factor (+)= 1;
    } 

    n > 1
}


fun prime(n)
vars pcount, cand
{
    if (n < 1) then
    {
        return 0;
    }

    cand = 1;

    while (pcount < n) 
    {
        cand (+)= 1;
        pcount (+)= isPrime(cand);
    }

    cand
}

fun numPrimeDivisors(n) 
vars i, p, k
{
    i = 1;
    p = prime(i);

    while (n > 1) {
        if !(n % p) then
        {
            k (+)= 1;
            n (/)= p;
        }
        else
        {
            i (+)= 1;
            p = prime(i);
        }
    }

    k
}

fun phi(n) 
vars i, p, k, pPhi, result
{
	i = 1;
	p = prime(i);
	result = 1;

	while (n > 1) {
		if !(n % p) then
		{
			k (+)= 1;
			n (/)= p;
		}
		else
		{
			result (*)= (k > 0) * p^(k-1) * (p-1);
			k = !(k > 0);

			i (+)= 1;
			p = prime(i);
		}
	}

	result * (k > 0) * p^(k-1) * (p-1)
}


fun gcd(a,b)
{
	?( !(a%b),
	   b,
	   @(b, a%b)
	)
}

fun triangular(n)
{
	(n+1) * n / 2
}

fun ackermann(m, n)
{
	?( !m,
	   n+1,
	   ?( !n,
	      @(m-1, 1),
	      @(m-1, @(m, n-1))
	    )
	 )
}

fun knuthUpArrow(a,b,p)
{
	?( p==1,
	   a^b,
	   ?( b==1,
	      a,
	      @(a, @(a,b-1,p), p-1)
	    )
	 )
}

